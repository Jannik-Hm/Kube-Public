user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include /etc/nginx/mime.types;
  default_type  text/html;

  # Translate X-Code to HTML-formatted error code
  map $http_x_code $error_code_html {
    default      "Unkown Error Code";  # Fallback placeholder
    "400"        "4<span>0</span>0";
    "401"        "4<span>0</span>1";
    "403"        "4<span>0</span>3";
    ""           "4<span>0</span>4"; # default not found page
    "404"        "4<span>0</span>4";
    "500"        "5<span>0</span>0";
    "502"        "5<span>0</span>2";
    "503"        "5<span>0</span>3";
    "504"        "5<span>0</span>4";
  }

  # Translate X-Code to error message
  map $http_x_code $error_message {
    default      "Unexpected Error";
    "400"        "Bad Request";
    "401"        "You need to be authorized to access this page";
    "403"        "You are not allowed to access this page";
    ""           "The page you requested does not exist"; # default not found page
    "404"        "The page you requested does not exist";
    "500"        "Internal Server Error";
    "502"        "Bad Gateway";
    "503"        "Service is currently unavailable";
    "504"        "The gateway did not get a response in time";
  }

  server {
    listen 80;
    root /usr/share/nginx/html;

    # Health check endpoint
    location = /healthz {
      access_log off;
      return 200 "healthy\n";
    }

    location @error_page {
      # Replace placeholders with dynamic content
      sub_filter '{{error_code}}' '$error_code_html';
      sub_filter '{{error_message}}' '$error_message';
      sub_filter_once on;
      # TODO: differentiate based on X-Format header, or switch to non nginx solution
      default_type text/html;
      try_files /index.html =404;
      internal;
    }

    # Catch-all: map X-Code to response
    location / {
      # Return the HTTP status code received via X-Code header
      if ($http_x_code = "400") {
        return 400;
      }
      if ($http_x_code = "401") {
        return 401;
      }
      if ($http_x_code = "403") {
        return 403;
      }

      if ($http_x_code = "500") {
        return 500;
      }
      if ($http_x_code = "502") {
        return 502;
      }
      if ($http_x_code = "503") {
        return 503;
      }
      if ($http_x_code = "504") {
        return 504;
      }

      return 404;
    }

    error_page 400 401 403 404 500 502 503 504 @error_page;
  }
}
